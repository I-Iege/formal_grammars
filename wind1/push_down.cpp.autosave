#include "push_down.h"

push_down::push_down(const grammar& h)
{
    gr_it=1;
    grammar g=h.chomsky();
    grammar_from_pd.push_back(g);
    sign e("e");
    sign z0("z0",false);
    sign q0("0",false);
    sign qh("h",false);
	sign_list sl;
	sl.push_back(e);

    this->T=g.T;
    this->Z=g.N;
    this->K=g.N;
    K.push_back(q0);
    K.push_back(qh);
    Z.push_back(z0);
    H.insert(qh);
    Z0=z0;
    Q0=q0;
    //type 1

    bool find=false;
    std::string t_info="";
    for(std::list<sign_list>::iterator it=g.P[g.S].begin();!find && it!=g.P[g.S].end();++it)
	{
        if(it->size()==1 && *(it->begin())==e)
        {
            find=true;
            move mv(z0,q0);
            sign_list sl_t;
            sl_t.push_back(z0);
            result r(sl_t,g.S);
            std::list<result> rl;
            rl.push_back(r);
            M[mv]=rl;
            t_info+=mv.to_string() +"->"+ r.to_string();
            t_info+="<br/>";
        }
	}
    moves.push_back(t_info);
   //moves=this->to_string();

	//type 2.

    t_info="";
    for(sign_list::iterator it=g.N.begin();it!=g.N.end();++it)
	{
		for(std::list<sign_list>::iterator it2=g.P[*it].begin();it2!=g.P[*it].end();++it2)
		{	
            if(it2->size()==1 && it2->begin()->Is_terminal()  && (*(it2->begin()))!=e)
			{
				std::string  tmp_s=it->to_string();
                sign q(tmp_s,false);
				sign_list sl_t;
				sl_t.push_back(z0);
				move mv(z0,q0,*(it2->begin()));
				result r(sl_t,q);
                t_info+=mv.to_string() + "->" +r.to_string();
                 t_info+="<br/>";
				if(M.count(mv)==0)
				{
					std::list<result> rl;
					rl.push_back(r);
					M[mv]=rl;
				}
				else
				{
					M[mv].push_back(r);
				}
			}
		}
    }
    moves.push_back(t_info);
	//type3
    t_info="";
	for(sign_list::iterator it=g.N.begin();it!=g.N.end();++it)
	{
		for(std::list<sign_list>::iterator it2=g.P[*it].begin();it2!=g.P[*it].end();++it2)
		{	
            if(it2->size()==1 && it2->begin()->Is_terminal())
			{
				for(sign_list::iterator it3=g.N.begin();it3!=g.N.end();++it3)
				{			
					for(sign_list::iterator it4=Z.begin();it4!=Z.end();++it4)
					{
                        move mv(*it4,*it3,*(it2->begin()));
						sign_list sl_t;
						sl_t.push_back(*it4);
                        sl_t.push_back(*it3);
                        result r(sl_t,*it);
                        t_info+=mv.to_string() + "->" + r.to_string() +"<br/>";
                        if(M.count(mv)==0)
						{
							std::list<result> rl;
							rl.push_back(r);
							M[mv]=rl;
						}
						else
						{
                            M[mv].push_back(r);
                        }
					}
				}				
				
			}
		}
	}
    moves.push_back(t_info);
    //type4
    t_info="";
    for(sign_list::iterator it=g.N.begin();it!=g.N.end();++it)
    {
        for(std::list<sign_list>::iterator it2=g.P[*it].begin();it2!=g.P[*it].end();++it2)
        {
            if(it2->size()==2)
            {
                move mv(*(it2->begin()),*(it2->begin()+1));
                sign_list sl_t;
                result r(sl_t,*it);
                t_info+=mv.to_string() + "->" + r.to_string() +"<br/>";
                if(M.count(mv)==0)
                {
                    std::list<result> rl;
                    rl.push_back(r);
                    M[mv]=rl;
                }
                else
                {
                    M[mv].push_back(r);
                }
            }
        }
    }
    moves.push_back(t_info);

    //type5
    t_info="";
    move mv(z0,h.S);
    sign_list sl_t;
    result r(sl_t,qh);
    t_info+=mv.to_string() + "->" + r.to_string() +"<br/>";
    if(M.count(mv)==0)
    {
        std::list<result> rl;
        rl.push_back(r);
        M[mv]=rl;
    }
    else
    {
        M[mv].push_back(r);
    }
    H.insert(qh);
    moves.push_back(t_info);

    this->to_empty_stack_pd();
    t_info=this->to_string();
    moves.push_back(t_info);
    for(int i=0;i<6;++i)
    {
        info.push_back("ok");
    }
}


push_down::push_down(const char* fname)
{
    std::ifstream f;
    f.open(fname);
    f.close();
}

std::string push_down::to_string() const
{
	std::string str="";
    for(std::map<move,std::list<result> >::const_iterator it=M.begin();it!=M.end();++it)
	{
		std::pair<move,std::list<result> > pr=*it;
        for(std::list<result>::iterator it2=pr.second.begin();it2!=pr.second.end();++it2)
		{
            str+=pr.first.to_string() + "->" + it2->to_string() + "<br/>";
		}
	}
	return str;
}


grammar push_down::to_grammar() const
{
   grammar g;

    sign e("e");
    sign s("S",false);
    g.S=s;
    g.N.push_back(s);
    std::set<sign> n_terminals;
    std::list<sign_list> sl;
    for(sign_list::const_iterator it=K.begin();it!=K.end();++it)
    {
        std::string str=Q0.to_string()+Z0.to_string()+it->to_string();
        sign t(str,false);
        sign_list l;
        l.push_back(t);
        sl.push_back(l);
    }
    g.P[s]=sl;
    sign_list tue=T;
    tue.push_back(e);
    for(auto it=M.begin();it!=M.end();++it)
    {
        move mv(it->first);
        sign c("c",false);
        std::list<result> l=it->second;
        for(std::list<result>::iterator it2=l.begin();it2!=l.end();++it2)
        {

            if(it2->stack.size()==0)
            {
                std::string str_t=mv.c_state.to_string()+ mv.stack.to_string()+it2->n_state.to_string();
                sign t(str_t,false);
                n_terminals.insert(t);
                std::list<sign_list> l;
                sign_list sl;
                sl.push_back(mv.c_terminal);
                l.push_back(sl);
                if(g.P.count(t)>0)
                { 
                    if((std::find(g.P[t].begin(),g.P[t].end(),sl)==g.P[t].end()))
                    g.P[t].push_back(sl);
                }
                else
                {
                    g.P[t]=l;
                }
            }
            else if(it2->stack.size()==1)
            {
                for(sign_list::const_iterator it3=K.begin();it3!=K.end();++it3)
                {
                    std::string str_t=mv.c_state.to_string()+ mv.stack.to_string()+it3->to_string();
                    sign t(str_t,false);
                    str_t=it2->n_state.to_string() + (it2->stack.begin()->to_string())+ it3->to_string();
                    sign t2(str_t,false);
                    std::list<sign_list> l;
                    n_terminals.insert(t);
                    n_terminals.insert(t2);
                    sign_list sl;
                    sl.push_back(mv.c_terminal);
                    sl.push_back(t2);
                    l.push_back(sl);
                    if(g.P.count(t)>0)
                    {
                        if((std::find(g.P[t].begin(),g.P[t].end(),sl)==g.P[t].end()))
                        g.P[t].push_back(sl);
                    }
                    else
                    {
                        g.P[t]=l;
                    }
                }
            }
            else
            {
                for(sign_list::const_iterator it3=K.begin();it3!=K.end();++it3)
                {
                    for(sign_list::const_iterator it4=K.begin();it4!=K.end();++it4)
                    {
                        if(mv.c_terminal==e)
                            continue;
                        std::string  tmp_str=mv.c_state.to_string()+ mv.stack.to_string()+it4->to_string();
                        sign nt1(tmp_str,false);
                        tmp_str=it2->n_state.to_string() + it2->stack[1].to_string() + it3->to_string();
                        sign nt2(tmp_str,false);
                        tmp_str=it3->to_string()+ it2->stack[0].to_string() + it4->to_string();
                        sign nt3(tmp_str,false);
                        sign_list sl;
                        n_terminals.insert(nt1);
                        n_terminals.insert(nt2);
                        n_terminals.insert(nt3);
                        sl.push_back(mv.c_terminal);
                        sl.push_back(nt2);
                        sl.push_back(nt3);
                        std::list<sign_list> l={sl};
                        if(g.P.count(nt1)>0)
                        {
                            if((std::find(g.P[nt1].begin(),g.P[nt1].end(),sl)==g.P[nt1].end()))
                            g.P[nt1].push_back(sl);

                        }
                        else
                        {
                             g.P[nt1]=l;
                        }
                    }
                }
            }
        }
    }
    for(std::set<sign>::iterator it=n_terminals.begin();it!=n_terminals.end();++it)
    {
        g.N.push_back(*it);
    }

    grammar_from_pd.push_back(g);
    g.find_derivables();
    grammar_from_pd.push_back(g);
    g.reduction();
    grammar_from_pd.push_back(g);
    g.substitute_pd_e_rules();
    grammar_from_pd.push_back(g);
    g.rename();
    grammar_from_pd.push_back(g);
    return g;
}

void push_down::to_empty_stack_pd()
{
    sign z0("z0",false);
    sign e("e");
    sign q0("0",false);
    sign z00("z0\'",false);
    sign q00("0\'",false);
    sign qh("h\'",false);
    H.insert(qh);
    K.push_back(q00);
    Z.push_back(z00);
    K.push_back(qh);
    sign_list sl;
    sl.push_back(z00);
    sl.push_back(z0);

    result r(sl,q0);
    std::list<result> rl={r};
    move mv(z00,q00);
    M[mv]=rl;

    for(std::set<sign>::iterator it=H.begin();it!=H.end();++it)
    {
        for(sign_list::iterator it2=Z.begin();it2!=Z.end();++it2)
        {
            move mv(*it2,*it);
            sign_list sl;
            result r(sl,qh);
            if(M.count(mv)==0)
            {
                std::list<result> l={r};
                M[mv]=l;
            }
            else
            {
                M[mv].push_back(r);
            }
        }
    }
}
std::string push_down::get_moves() const
{
    return moves[alg_it];
}


std::vector<std::pair<int,int> > push_down::select() const
{
    std::vector<std::pair<int,int> > vec;
    for(int i=0;i<(int)K.size();++i)
    {
        for(int j=0;j<(int)K.size();++j)
        {
            vec.push_back(std::make_pair(i,j));
        }
    }
    return vec;
}

grammar push_down::get_grammar() const
{
    return grammar_from_pd[gr_it];
}
void push_down::next_grammar()
{
    if(gr_it<(grammar_from_pd.size()-1))
    {
       ++gr_it;
    }
}
void push_down::prev_grammar()
{
    if(gr_it>0)
    {
        --gr_it;
    }
}

 std::string push_down::grammar_progress() const
 {
     std::string s;
     s+=std::to_string(gr_it);
     s+="/";
     s+=std::to_string(grammar_from_pd.size()-1);
     return s;
 }
